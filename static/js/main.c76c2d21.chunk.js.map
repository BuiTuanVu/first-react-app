{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","firNumber","secNumber","sum","handleChangeFirstNumber","bind","handleChangeSecondNumber","handleRefresh","event","this","setState","target","value","Number","className","onSubmit","handleSubmit","type","placeholder","onChange","onBlur","handleCheck","onClick","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qKAAAA,EAAOC,QAAU,IAA0B,kC,4ICiF5BC,G,wBA3Eb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAAEC,UAAW,GAAIC,UAAW,GAAIC,IAAK,IAElD,EAAKC,wBAA0B,EAAKA,wBAAwBC,KAA7B,gBAC/B,EAAKC,yBAA2B,EAAKA,yBAAyBD,KAA9B,gBAChC,EAAKE,cAAgB,EAAKA,cAAcF,KAAnB,gBANJ,E,qFAWKG,GAAQ,IAAD,OAC7BC,KAAKC,SAAS,CAAET,UAAWO,EAAMG,OAAOC,QACtC,WAAQ,EAAKF,SAAS,CAAEP,IAAKU,OAAO,EAAKb,MAAMC,WAAaY,OAAO,EAAKb,MAAME,kB,+CAIzDM,GAAQ,IAAD,OAC9BC,KAAKC,SAAS,CAAER,UAAWM,EAAMG,OAAOC,QACtC,WAAQ,EAAKF,SAAS,CAAEP,IAAKU,OAAO,EAAKb,MAAMC,WAAaY,OAAO,EAAKb,MAAME,kB,sCAKjE,IAAD,OACdO,KAAKC,SAAS,CAAET,UAAW,KACzB,WAAQ,EAAKS,SAAS,CAAER,UAAW,KACjC,WAAQ,EAAKQ,SAAU,CAACP,IAAK,a,+BAIjC,OACE,yBAAKW,UAAU,OACb,yBAAKA,UAAU,QACb,wBAAIA,UAAU,eAAd,qBACA,yBAAKA,UAAU,aACb,wBAAIA,UAAU,cAAd,kBACA,uBAAGA,UAAU,aAAb,oFACA,uBAAGA,UAAU,aAAb,sDACA,0BAAMC,SAAUN,KAAKO,cACnB,yBAAKF,UAAU,YACb,yBAAKA,UAAU,SACb,2BAAOG,KAAK,OAAOH,UAAU,eAAeI,YAAY,eAAeN,MAAOH,KAAKT,MAAMC,UAAWkB,SAAUV,KAAKL,wBAAyBgB,OAAQX,KAAKY,eAE3J,yBAAKP,UAAU,SACb,qCAEF,yBAAKA,UAAU,SACb,2BAAOG,KAAK,OAAOH,UAAU,eAAeI,YAAY,gBAAgBN,MAAOH,KAAKT,MAAME,UAAWiB,SAAUV,KAAKH,4BAEtH,yBAAKQ,UAAU,SACb,qCAEF,yBAAKA,UAAU,SACb,2BAAOG,KAAK,OAAOH,UAAU,eAAeI,YAAY,SAASN,MAAOH,KAAKT,MAAMG,OAErF,yBAAKW,UAAU,SACf,4BAAQG,KAAK,SAASH,UAAU,kBAAkBQ,QAASb,KAAKF,eAAe,uBAAGgB,MAAM,+B,GA1DtFC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c76c2d21.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { firNumber: '', secNumber: '', sum: '' };\n\n    this.handleChangeFirstNumber = this.handleChangeFirstNumber.bind(this);\n    this.handleChangeSecondNumber = this.handleChangeSecondNumber.bind(this);\n    this.handleRefresh = this.handleRefresh.bind(this);\n  }\n\n\n\n  handleChangeFirstNumber(event) {\n    this.setState({ firNumber: event.target.value },\n      () => { this.setState({ sum: Number(this.state.firNumber) + Number(this.state.secNumber) }) }\n    );\n  }\n\n  handleChangeSecondNumber(event) {\n    this.setState({ secNumber: event.target.value },\n      () => { this.setState({ sum: Number(this.state.firNumber) + Number(this.state.secNumber) }) }\n    );\n\n  }\n\n  handleRefresh() {\n    this.setState({ firNumber: '' },\n      () => { this.setState({ secNumber: '' }, \n        () => { this.setState( {sum: ''})}) }\n    );\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"card\">\n          <h5 className=\"card-header\">Sample Calculator</h5>\n          <div className=\"card-body\">\n            <h5 className=\"card-title\">1612825-BTCN01</h5>\n            <p className=\"card-text\">Enter the two numbers and automatically display the sum of the entered numbers. </p>\n            <p className=\"card-text\">You can use the bellow button to refresh the form.</p>\n            <form onSubmit={this.handleSubmit}>\n              <div className=\"form-row\">\n                <div className=\"col-3\">\n                  <input type=\"text\" className=\"form-control\" placeholder=\"First Number\" value={this.state.firNumber} onChange={this.handleChangeFirstNumber} onBlur={this.handleCheck}/>\n                </div>\n                <div className=\"col-1\">\n                  <label>+</label>\n                </div>\n                <div className=\"col-3\">\n                  <input type=\"text\" className=\"form-control\" placeholder=\"Second Number\" value={this.state.secNumber} onChange={this.handleChangeSecondNumber} />\n                </div>\n                <div className=\"col-1\">\n                  <label>=</label>\n                </div>\n                <div className=\"col-3\">\n                  <input type=\"text\" className=\"form-control\" placeholder=\"Result\" value={this.state.sum} />\n                </div>\n                <div className=\"col-1\">\n                <button type=\"button\" className=\"btn btn-success\" onClick={this.handleRefresh}><i class=\"fas fa-sync-alt\"></i></button>\n                </div>\n                \n              </div>\n            </form>\n          </div>\n        </div>\n\n\n\n      </div>\n    );\n  }\n}\n\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}